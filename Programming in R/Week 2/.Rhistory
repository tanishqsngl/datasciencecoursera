f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
swirl()
swirl()
library(swirl)
swirl()
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect <- c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect['bar']
vect[c('foo', "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matric <- my_vector
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
character <- c("patient", "age", "weight", "bp", "rating", "test")
info()
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data, cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
swirl()
TRUE = TRUE
TRUE == TRUE
(FALSE == TRUE)  == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 == 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins", "twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints)
which(ints>7)
any(ints)
any(int<0)
any(ints<0)
all(ints>0)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function("My first function!")
boring_function
for
?for
?for
submit()
submit()
my_mean()
my_mean(4, 5, 10)
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
?median
wget()
w.get()
setwd("~/datasciencecoursera/Programming in R/Week 2")
submit()
submit()
submit()
evaluate(sum, c(2, 4))
evaluate(sum, c(2, 4))
evaluate(sum, c(2, 4))
evaluate(sum, c(2, 4))
submit()
evaluate(median, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1], c(8, 4, 0)})
evaluate(function(x){x[1]}, c(8, 4, 0)})
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit
submit()
telegram("FUCK", "You")
args(mad_libs)
args(mad_libs)
submit()
submit()
mad_libs("fdfd", "ffff", "vre")
submit()
submit()
'I' %p% 'love' %p% 'R!'
swirl()
source('/tmp/RtmpSHoOkz/evaluate.R')
source('/tmp/RtmpSHoOkz/evaluate.R')
